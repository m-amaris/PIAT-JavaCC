/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. XMLParser.jj */
/*@egen*/options
{
  STATIC = true;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(XMLParser)
import java.io.*;
public class XMLParser/*@bgen(jjtree)*/implements XMLParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTXMLParserState jjtree = new JJTXMLParserState();

/*@egen*/
  public static void main(String [] args) throws ParseException
  {
    XMLParser parser;
	    try
    {
		      parser = new XMLParser(new XMLParserTokenManager(new SimpleCharStream(new FileReader(args [0]))));
		      parser.document();
	    }
    catch (FileNotFoundException e)
    {
		      e.printStackTrace();
	    }
  }
}

PARSER_END(XMLParser)

<* >
SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

< CONCEPTS >
TOKEN :
{
  < CLOSE_CONCEPTS : "</concepts>" > : DEFAULT
| < OPEN_CONCEPT : "<concept>" > : CONCEPT
}

< CONCEPT >
TOKEN :
{
  < OPEN_CODE : "<code>" > : CONCEPT
| < CLOSE_CODE : "</code>" > : CONCEPT
| < OPEN_LABEL : "<label>" > : CONCEPT
| < CLOSE_LABEL : "</label>" > : CONCEPT
| < TAG_CONTENT : ~[ ] > : CONCEPT
	}

< DEFAULT, CONCEPT >
TOKEN :
{
  < OPEN_CONCEPTS : "<concepts>" > : CONCEPTS
}

< CONCEPT, CONCEPTS >
TOKEN :
{
	  < CLOSE_CONCEPT : "</concept>" > : CONCEPTS
}

void document() :
{/*@bgen(jjtree) document */
  SimpleNode jjtn000 = new SimpleNode(JJTDOCUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) document */
  try {
/*@egen*/
  (
    concepts()
  )*
  < EOF >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void concepts() :
{/*@bgen(jjtree) concepts */
  SimpleNode jjtn000 = new SimpleNode(JJTCONCEPTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) concepts */
  try {
/*@egen*/
  < OPEN_CONCEPTS >
  (
    concept()
  )*
  < CLOSE_CONCEPTS >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void concept() :
{/*@bgen(jjtree) concept */
  SimpleNode jjtn000 = new SimpleNode(JJTCONCEPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) concept */
  try {
/*@egen*/
  < OPEN_CONCEPT >
  (
    element()
  )*
  (
    concepts()
  )?
  < CLOSE_CONCEPT >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void element() :
{/*@bgen(jjtree) element */
  SimpleNode jjtn000 = new SimpleNode(JJTELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) element */
  try {
/*@egen*/
  (
    (
      < OPEN_CODE > (< TAG_CONTENT >)* < CLOSE_CODE >
    )
  |
    (
      < OPEN_LABEL > (< TAG_CONTENT >)* < CLOSE_LABEL >
    )
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}