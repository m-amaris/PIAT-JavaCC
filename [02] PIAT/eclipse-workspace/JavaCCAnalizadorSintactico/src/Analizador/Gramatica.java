/* Gramatica.java */
/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
/* Analizador de codigo txt*/
package Analizador;
public class Gramatica implements GramaticaConstants {

/* Analizador Sint√°ctico */
  final public 
void Main() throws ParseException {
    Program();
    jj_consume_token(0);
}

  final public void Program() throws ParseException {
    label_1:
    while (true) {
      Libraries();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRINGIZING:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case USING:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Namespaces();
    }
    Init();
}

  final public void Libraries() throws ParseException {
    jj_consume_token(STRINGIZING);
    jj_consume_token(INCLUDE_LIBRARY);
    jj_consume_token(LESS_THAN);
    jj_consume_token(ID);
    jj_consume_token(MORE_THAN);
}

  final public void Namespaces() throws ParseException {
    jj_consume_token(USING);
    jj_consume_token(NAMESPACE);
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
}

  final public void Init() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case VOID:{
      jj_consume_token(VOID);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(MAIN);
    jj_consume_token(PARENTHESIS_LEFT);
    jj_consume_token(PARENTHESIS_RIGHT);
    jj_consume_token(BRACE_LEFT);
    Sentences();
    jj_consume_token(RETURN);
    jj_consume_token(NUMBER);
    jj_consume_token(SEMICOLON);
    jj_consume_token(BRACE_RIGHT);
}

  final public void Sentences() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case FLOAT:
      case DOUBLE:
      case STRING:
      case CHAR:
      case IF:
      case WHILE:
      case DO:
      case FOR:
      case CIN:
      case COUT:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      if (jj_2_1(4)) {
        Declaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COUT:{
          Print();
          break;
          }
        case CIN:{
          Scan();
          break;
          }
        case IF:{
          Conditional();
          break;
          }
        case WHILE:{
          While();
          break;
          }
        case DO:{
          DoWhile();
          break;
          }
        case FOR:{
          For();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  final public void Declaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case DOUBLE:
    case STRING:
    case CHAR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(ID);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSING:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      Assignment();
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUM:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      Operation();
    }
    jj_consume_token(SEMICOLON);
}

  final public void Print() throws ParseException {
    jj_consume_token(COUT);
    label_6:
    while (true) {
      jj_consume_token(LEFT_SHIFT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHAIN:{
        jj_consume_token(CHAIN);
        break;
        }
      case ID:
      case NUMBER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          jj_consume_token(ID);
          break;
          }
        case NUMBER:{
          jj_consume_token(NUMBER);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SUM:
          case MINUS:
          case MULTIPLY:
          case DIVIDE:{
            ;
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            break label_7;
          }
          Operation();
        }
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT_SHIFT:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
    }
    jj_consume_token(SEMICOLON);
}

  final public void Scan() throws ParseException {
    jj_consume_token(CIN);
    label_8:
    while (true) {
      jj_consume_token(RIGHT_SHIFT);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RIGHT_SHIFT:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
    }
    jj_consume_token(SEMICOLON);
}

  final public void Conditional() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(PARENTHESIS_LEFT);
    Condition();
    jj_consume_token(PARENTHESIS_RIGHT);
    jj_consume_token(BRACE_LEFT);
    Sentences();
    jj_consume_token(BRACE_RIGHT);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      Else();
    }
}

  final public void While() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(PARENTHESIS_LEFT);
    Condition();
    jj_consume_token(PARENTHESIS_RIGHT);
    jj_consume_token(BRACE_LEFT);
    Sentences();
    jj_consume_token(BRACE_RIGHT);
}

  final public void DoWhile() throws ParseException {
    jj_consume_token(DO);
    jj_consume_token(BRACE_LEFT);
    Sentences();
    jj_consume_token(BRACE_RIGHT);
    jj_consume_token(WHILE);
    jj_consume_token(PARENTHESIS_LEFT);
    Condition();
    jj_consume_token(PARENTHESIS_RIGHT);
    jj_consume_token(SEMICOLON);
}

  final public void For() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(PARENTHESIS_LEFT);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case FLOAT:
      case DOUBLE:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(ID);
    jj_consume_token(ASSING);
    jj_consume_token(NUMBER);
    jj_consume_token(SEMICOLON);
    Condition();
    jj_consume_token(SEMICOLON);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCREMENT:{
      jj_consume_token(INCREMENT);
      break;
      }
    case DECREMENT:{
      jj_consume_token(DECREMENT);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARENTHESIS_RIGHT);
    jj_consume_token(BRACE_LEFT);
    Sentences();
    jj_consume_token(BRACE_RIGHT);
}

  final public void Operation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUM:{
      jj_consume_token(SUM);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    case MULTIPLY:{
      jj_consume_token(MULTIPLY);
      break;
      }
    case DIVIDE:{
      jj_consume_token(DIVIDE);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      jj_consume_token(NUMBER);
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Assignment() throws ParseException {
    jj_consume_token(ASSING);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      jj_consume_token(NUMBER);
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Else() throws ParseException {
    jj_consume_token(ELSE);
    jj_consume_token(BRACE_LEFT);
    Sentences();
    jj_consume_token(BRACE_RIGHT);
}

  final public void Condition() throws ParseException {
    if (jj_2_2(4)) {
      jj_consume_token(NOT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        jj_consume_token(ID);
        break;
        }
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case ID:
      case NUMBER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          jj_consume_token(ID);
          break;
          }
        case NUMBER:{
          jj_consume_token(NUMBER);
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUAL_TO:{
          jj_consume_token(EQUAL_TO);
          break;
          }
        case MORE_THAN:{
          jj_consume_token(MORE_THAN);
          break;
          }
        case MORE_OR_EQUAL_THAN:{
          jj_consume_token(MORE_OR_EQUAL_THAN);
          break;
          }
        case LESS_THAN:{
          jj_consume_token(LESS_THAN);
          break;
          }
        case LESS_OR_EQUAL_THAN:{
          jj_consume_token(LESS_OR_EQUAL_THAN);
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          jj_consume_token(ID);
          break;
          }
        case NUMBER:{
          jj_consume_token(NUMBER);
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(NOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  private boolean jj_3R_Assignment_207_11_15()
 {
    if (jj_scan_token(ASSING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    return false;
  }

  private boolean jj_3R_Declaration_159_14_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Declaration_159_101_14()
 {
    if (jj_3R_Operation_201_11_16()) return true;
    return false;
  }

  private boolean jj_3R_Declaration_159_11_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Declaration_159_14_12()) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Declaration_159_83_13()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Declaration_159_101_14()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_Operation_201_11_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_Declaration_159_11_11()) return true;
    return false;
  }

  private boolean jj_3R_Declaration_159_83_13()
 {
    if (jj_3R_Assignment_207_11_15()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x8000000,0x200000,0x40040,0x180efc0,0x180e800,0x7c0,0x7c0,0x0,0xf0000000,0x0,0xf0000000,0x0,0x0,0x0,0x1000,0x1c0,0x1c0,0x0,0xf0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x2,0x0,0x3000000,0x0,0x7000000,0x1000,0x2000,0x0,0x0,0x0,0x18000,0x0,0x3000000,0x3000000,0x3000000,0x200,0x3000000,0x7c,0x200,0x3000000,0x3000200,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new GramaticaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new GramaticaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new GramaticaTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[59];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 28; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 59; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

                       }
