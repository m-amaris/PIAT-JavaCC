/* JSONParser.java */
/* Generated By:JavaCC: Do not edit this line. JSONParser.java */
package Analizador;
import java.io.*;
import java.util.*;
import com.google.gson.*;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
public class JSONParser implements JSONParserConstants {
  private static File file;
  public static void main(String args []) throws ParseException
  {
    JSONParser.getFile();
            if (file == null)
    {
      System.out.println("Invalid File or no file selected");
      System.exit(- 1);
    }
    try
    {
      //FileInputStream fileStream = new FileInputStream("C:\\Users\\miguel\\Documents\\prueba.json");
      //JSONParser parser = new JSONParser(fileStream);
      JSONParser parser = new JSONParser(new JSONParserTokenManager(new SimpleCharStream(new FileReader(JSONParser.file))));
      Gson gson = new GsonBuilder().setPrettyPrinting().create();
      String jsonOutput = gson.toJson(parser.json());
      System.out.println(jsonOutput);
    }
    catch (ParseException e)
    {
      System.out.println(e.getMessage());
    }
    catch (IOException e)
    {
      System.out.println("Error reading the JSON file: " + e.getMessage());
    }
  }

  private final static void getFile()
  {
                    JFileChooser search = new JFileChooser();
                    FileNameExtensionFilter filter1 = new FileNameExtensionFilter("Archivo de texto (.txt)", "txt");
                    FileNameExtensionFilter filter2 = new FileNameExtensionFilter("Archivo JSON (.json)", "json");
                    search.setFileFilter(filter1);
                    search.setFileFilter(filter2);
                    int option = search.showOpenDialog(null);
                    if (option == JFileChooser.APPROVE_OPTION)
    {
                              file = search.getSelectedFile();
                    }
          }

  final public JsonElement json() throws ParseException {JsonElement j;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OBJECT_START:{
      j = object();
      break;
      }
    case ARRAY_START:{
      j = array();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return j;}
    throw new Error("Missing return statement in function");
}

  final public JsonObject object() throws ParseException {AbstractMap.SimpleEntry < String, JsonElement > p;
          JsonObject o = new JsonObject();
    jj_consume_token(OBJECT_START);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      p = pair();
o.add(p.getKey(), p.getValue()); // Construir pareja con clave y valor y añadirlo al objeto Json

      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        p = pair();
o.add(p.getKey(), p.getValue()); // Construir pareja con clave y valor y añadirlo al objeto Json

      }
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(OBJECT_END);
{if ("" != null) return o;}
    throw new Error("Missing return statement in function");
}

  final public JsonArray array() throws ParseException {JsonObject o;
  JsonArray a = new JsonArray();
    jj_consume_token(ARRAY_START);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OBJECT_START:{
      o = object();
a.add(o);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        o = object();
a.add(o);
      }
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(ARRAY_END);
{if ("" != null) return a;} // Retornar el array JSON

    throw new Error("Missing return statement in function");
}

  final public AbstractMap.SimpleEntry < String, JsonElement > pair() throws ParseException {AbstractMap.SimpleEntry < String, JsonElement > p;
  JsonElement e;
  Token t;
    t = jj_consume_token(STRING);
    jj_consume_token(COLON);
    e = value();
p = new AbstractMap.SimpleEntry < String, JsonElement > (t.image.substring(1, t.image.length() - 1), e);
    {if ("" != null) return p;}
    throw new Error("Missing return statement in function");
}

  final public JsonElement value() throws ParseException {Token t;
          JsonElement e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      t = jj_consume_token(STRING);
{if ("" != null) return new JsonPrimitive(t.image.substring(1, t.image.length() - 1));} // Retornar el valor (cadena)

      break;
      }
    case NUMBER:{
      t = jj_consume_token(NUMBER);
{if ("" != null) return new JsonPrimitive(t.image.substring(1, t.image.length() - 1));} // Retornar el valor (número)

      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return new JsonPrimitive(true);}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return new JsonPrimitive(false);}
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
{if ("" != null) return null;}
      break;
      }
    case OBJECT_START:{
      e = object();
{if ("" != null) return e;}
      break;
      }
    case ARRAY_START:{
      e = array();
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public JSONParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xa0,0x4000,0x200,0x4000,0x20,0x3ea0,};
	}

  /** Constructor with InputStream. */
  public JSONParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JSONParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JSONParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JSONParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new JSONParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JSONParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JSONParser(JSONParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JSONParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[16];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 6; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 16; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
