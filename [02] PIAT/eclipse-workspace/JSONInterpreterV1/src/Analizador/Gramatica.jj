/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Gramatica.jj */
/*@egen*/options
{
    IGNORE_CASE = true;                                     
                             // Habilitar la generaci\u00c3\u00b3n de nodos AST
    STATIC = false;
}

PARSER_BEGIN(Gramatica)
package Analizador;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
public class Gramatica/*@bgen(jjtree)*/implements GramaticaTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTGramaticaState jjtree = new JJTGramaticaState();

/*@egen*/

    private static JsonObject jsonObject = new JsonObject();
    private JsonArray jsonArray = new JsonArray();

    // M\u00c3\u00a9todos para obtener el objeto JSON resultante
    public JsonObject getJsonObject() {
        return jsonObject;
    }

    // M\u00c3\u00a9todo para obtener el array JSON resultante
    public JsonArray getJsonArray() {
        return jsonArray;
    }
}

PARSER_END(Gramatica)

SKIP :
{
    " "
    | "\t"
    | "\r"
    | "\n"
}

// Definici\u00c3\u00b3n de tokens
TOKEN:
{
    <OBJECT_START: "{" >
  | <OBJECT_END: "}" >
  | <ARRAY_START: "[" >
  | <ARRAY_END: "]" >
  | <STRING: "\"" (~["\"","\n","\r"])* "\"" >
  | <NUMBER: (["0"-"9"])+ >
  | <TRUE: "true" >
  | <FALSE: "false" >
  | <NULL: "null" >
  | <COMMA: "," >
  | <COLON: ":" >
}

// Producci\u00c3\u00b3n principal para JSON
void json() :
{/*@bgen(jjtree) json */
  SimpleNode jjtn000 = new SimpleNode(JJTJSON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) json */
    try {
/*@egen*/
    ( object() | array() )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// Producci\u00c3\u00b3n para objeto JSON
void object() :
{/*@bgen(jjtree) object */
  SimpleNode jjtn000 = new SimpleNode(JJTOBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) object */
    try {
/*@egen*/
    <OBJECT_START>
    ( pair()
        {
            // Construir pareja con clave y valor
            // A\u00c3\u00b1adirlo a un objeto Json
        }
    (<COMMA> pair()
       {
           // Construir pareja con clave y valor
           // A\u00c3\u00b1adirlo a un objeto Json
       }
    )*)?
    <OBJECT_END>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        // Retornar el objeto JSON
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// Producci\u00c3\u00b3n para array JSON
void array() :
{/*@bgen(jjtree) array */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array */
    try {
/*@egen*/
    <ARRAY_START>
    ( value()
        {
          // Construir objeto JSON
          // A\u00c3\u00b1adirlo al array
        }
	(<COMMA> value()
        {
          // Contruir objeto
          // A\u00c3\u00b1adirlo al array
        }
    )*)?
    <ARRAY_END>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        // Retornar el array JSON
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// Producci\u00c3\u00b3n para par clave-valor
void pair() :
{/*@bgen(jjtree) pair */
  SimpleNode jjtn000 = new SimpleNode(JJTPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pair */
    try {
/*@egen*/
    <STRING> <COLON> value()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        // Retornar la clave (cadena)
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// Producci\u00c3\u00b3n para valor JSON
void value() :
{/*@bgen(jjtree) value */
        SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) value */
    try {
/*@egen*/
    (t=<STRING>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            // Retornar el valor (cadena)
        }
    | <NUMBER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            // Retornar el valor (n\u00c3\u00bamero)
        }
    | <TRUE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            // Retornar el valor (true)
        }
    | <FALSE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
        }
    | <NULL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
        }
    | object()
    | array())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}