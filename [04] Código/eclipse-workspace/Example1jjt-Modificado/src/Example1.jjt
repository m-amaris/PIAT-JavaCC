PARSER_BEGIN(Example1)
/**
 * An Arithmetic Grammar.
 */
public class Example1
{
  /** Main entry point. */
  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    Example1 t = new Example1(System.in);
    try
    {
      SimpleNode n = t.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Example1)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
  >
| 
  < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| 
  < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| 
  < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| 
  < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| 
  < #DIGIT : [ "0"-"9" ] >
}

/** Main production. */
SimpleNode Start() :
{}
{
  Expression() ";"
  {
    return jjtThis;
  }
}

/** An Expression. */
void Expression() :
{}
{
  AdditiveExpression()
}

/** An Additive Expression. */
void AdditiveExpression() :
{}
{
  MultiplicativeExpression()
  (
    (
      "+"
    {System.out.println("Addition");}
    | "-"
    {System.out.println("Substraction");}
    )
    MultiplicativeExpression()
  )*
}

/** A Multiplicative Expression. */
void MultiplicativeExpression() :
{}
{
  UnaryExpression()
  (
    (
      "*"
    | "/"
    | "%"
    )
    UnaryExpression()
  )*
}

/** A Unary Expression. */
void UnaryExpression() :
{}
{
  "(" Expression() ")"
| Identifier()
| Integer()
}

/** An Identifier. */
void Identifier() :
{}
{
  < IDENTIFIER >
}

/** An Integer. */
void Integer() :
{}
{
  < INTEGER_LITERAL >
}
