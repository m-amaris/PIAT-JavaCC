/* XMLParser.java */
/* Generated By:JavaCC: Do not edit this line. XMLParser.java */
package piat.opendatasearch;
import java.util.List;
import java.util.ArrayList;
public class XMLParser implements XMLParserConstants {
        private List < Concept > conceptsList;
        private List < Dataset > datasetsList;
        private String conceptLabel;
        private String nombreCategoria;

  final public ManejadorXML processFile(String code) throws ParseException {conceptsList = new ArrayList < Concept > ();
  datasetsList = new ArrayList < Dataset > ();
  nombreCategoria = code;
    jj_consume_token(HEADER);
    jj_consume_token(CATALOG);
    jj_consume_token(XMLNS);
    jj_consume_token(STRING);
    jj_consume_token(XMNLNS_XSI);
    jj_consume_token(STRING);
    jj_consume_token(XSI_SCHEMA_LOCATION);
    jj_consume_token(STRING);
    jj_consume_token(END_ELEMENT);
    label_1:
    while (true) {
      jj_consume_token(OPEN_CONCEPTS);
      label_2:
      while (true) {
        concept();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPEN_CONCEPT:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(CLOSE_CONCEPTS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_CONCEPTS:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    label_3:
    while (true) {
      jj_consume_token(OPEN_DATASETS);
      label_4:
      while (true) {
        dataset();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPEN_DATASET:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(CLOSE_DATASETS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_DATASETS:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(CLOSE_CATALOG);
return new ManejadorXML(datasetsList,conceptsList);
}

  final public Concept concept() throws ParseException {Token idValue;
  String codeValue, labelValue;
  Concept childConcept;
  List < Concept > concepts = new ArrayList < Concept > ();
    jj_consume_token(OPEN_CONCEPT);
    jj_consume_token(ID);
    idValue = jj_consume_token(STRING);
    jj_consume_token(END_ELEMENT);
    jj_consume_token(OPEN_CODE);
    codeValue = getCode();
    jj_consume_token(CLOSE_CODE);
    jj_consume_token(OPEN_LABEL);
    labelValue = getValue();
    jj_consume_token(CLOSE_LABEL);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_CONCEPTS:{
      jj_consume_token(OPEN_CONCEPTS);
      label_5:
      while (true) {
        childConcept = concept();
concepts.add(childConcept);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPEN_CONCEPT:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
      }
      jj_consume_token(CLOSE_CONCEPTS);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE_CONCEPT);
if(codeValue.equals(nombreCategoria)) {
      conceptLabel = idValue.image;
      conceptsList.add(new Concept(idValue.image, codeValue, labelValue, concepts));
        }
        return new Concept(idValue.image, codeValue, labelValue, concepts);
}

  final public void dataset() throws ParseException {Token idDataset, idConcept;
  String title;
  String description = "";
  String keyword = "";
  String theme = "";
  String publisher = "";
  List < IdConcept > idConcepts = new ArrayList < IdConcept > ();
    jj_consume_token(OPEN_DATASET);
    jj_consume_token(ID);
    idDataset = jj_consume_token(STRING);
    jj_consume_token(END_ELEMENT);
    jj_consume_token(OPEN_TITLE);
    title = getValue();
    jj_consume_token(CLOSE_TITLE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_DESCRIPTION:{
      jj_consume_token(OPEN_DESCRIPTION);
      description = getValue();
      jj_consume_token(CLOSE_DESCRIPTION);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_KEYWORD:{
      jj_consume_token(OPEN_KEYWORD);
      keyword = getValue();
      jj_consume_token(CLOSE_KEYWORD);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_THEME:{
      jj_consume_token(OPEN_THEME);
      theme = getValue();
      jj_consume_token(CLOSE_THEME);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_PUBLISHER:{
      jj_consume_token(OPEN_PUBLISHER);
      publisher = getValue();
      jj_consume_token(CLOSE_PUBLISHER);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_CONCEPTS:{
      jj_consume_token(OPEN_CONCEPTS);
      label_6:
      while (true) {
        jj_consume_token(OPEN_CONCEPT);
        jj_consume_token(ID);
        idConcept = jj_consume_token(STRING);
        jj_consume_token(END_ELEMENT);
idConcepts.add(new IdConcept(idConcept.image));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPEN_CONCEPT:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
      }
      jj_consume_token(CLOSE_CONCEPTS);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE_DATASET);
for(IdConcept ic : idConcepts) {
      if(ic.getId().equals(conceptLabel)) {
        datasetsList.add(new Dataset(idDataset.image, title, description, keyword,theme,publisher,idConcepts));
      }
    }
    //return new Dataset(idDataset.image, title, description, keyword,theme,publisher,idConcepts);

}

  final public String getCode() throws ParseException {Token t = new Token();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALUE_CODE:{
      t = jj_consume_token(VALUE_CODE);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
return t.image.substring(1, t.image.length() - 1);
}

  final public String getValue() throws ParseException {Token t = new Token();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALUE_LABEL:{
      t = jj_consume_token(VALUE_LABEL);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
return t.image;
}

  /** Generated Token Manager. */
  public XMLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1000,0x20,0x2000,0x40,0x1000,0x20,0x800000,0x1000000,0x2000000,0x4000000,0x1000,0x20,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x8,};
	}

  /** Constructor. */
  public XMLParser(Provider stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new XMLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public XMLParser(String dsl) throws ParseException, TokenMgrException {
	   this(new StringProvider(dsl));
  }

  public void ReInit(String s) {
	  ReInit(new StringProvider(s));
  }
  /** Reinitialise. */
  public void ReInit(Provider stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new XMLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public XMLParser(XMLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(XMLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[39];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 14; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 39; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : XMLParserTokenManager.lexStateNames[token_source.curLexState]);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
