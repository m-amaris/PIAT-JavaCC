options
{
  STATIC = false;
  JAVA_TEMPLATE_TYPE = "modern";
}

PARSER_BEGIN(XMLParser)
package piat.opendatasearch;
import java.util.List;
import java.util.ArrayList;
public class XMLParser{
	private List < Concept > conceptsList;
	private List < Dataset > datasetsList;
	private String conceptLabel;
	private String nombreCategoria;
}
PARSER_END(XMLParser) 

SKIP :
{
  " " 
| "\t"
| "\r"
| "\n"
} 

TOKEN :
{
  < OPEN_CONCEPTS : "<concepts>" >
| < OPEN_DATASETS : "<datasets>" >
| < CATALOG : "<catalog" >
| < XMLNS : "xmlns=" >
| < XMNLNS_XSI : "xmlns:xsi=" >
| < XSI_SCHEMA_LOCATION : "xsi:schemaLocation=" >
| < HEADER : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" >
| < OPEN_CONCEPT : "<concept" >
| < OPEN_DATASET : "<dataset" >
| < CLOSE_CONCEPTS : "</concepts>" >
| < CLOSE_DATASETS : "</datasets>" >
| < CLOSE_CATALOG : "</catalog>" >
| < CLOSE_CONCEPT : "</concept>" >
| < CLOSE_DATASET : "</dataset>" >
| < OPEN_CODE : "<code" >
| < CLOSE_CODE : "/code>" >
| < OPEN_LABEL : "<label>" >
| < OPEN_TITLE : "<title>" >
| < OPEN_DESCRIPTION : "<description>" >
| < OPEN_KEYWORD : "<keyword>" >
| < OPEN_THEME : "<theme>" >
| < OPEN_PUBLISHER : "<publisher>" >
| < CLOSE_LABEL : "</label>" >
| < CLOSE_TITLE : "</title>" >
| < CLOSE_DESCRIPTION : "</description>" >
| < CLOSE_KEYWORD : "</keyword>" >
| < CLOSE_THEME : "</theme>" >
| < CLOSE_PUBLISHER : "</publisher>" >
| < ID : "id=" >
| < VALUE_CODE : ">" (~[ "\"", "\n", "\r", "<", ">", "=" ])+ "<" >
| < VALUE_LABEL : "<![CDATA[" (~[ "\"", "\n", "\r", "<", ">", "=" ])+ "]]>" >
| < STRING : "\"" (~[ "\"", "\n", "\r" ])+ "\"" >
| < END_ELEMENT : ">" >
}

SKIP :
{
  < ~[ ] >
}

ManejadorXML processFile(String code) :
{
  conceptsList = new ArrayList < Concept > ();
  datasetsList = new ArrayList < Dataset > ();
  nombreCategoria = code;
}
{
  < HEADER > 
  < CATALOG > < XMLNS > < STRING > < XMNLNS_XSI > < STRING > < XSI_SCHEMA_LOCATION > < STRING > < END_ELEMENT >
  (< OPEN_CONCEPTS > (concept())+ < CLOSE_CONCEPTS >)+
  (< OPEN_DATASETS > (dataset())+ < CLOSE_DATASETS >)+
  < CLOSE_CATALOG >
  {
    return new ManejadorXML(datasetsList,conceptsList);
  }
}

Concept concept() :
{
  Token idValue;
  String codeValue, labelValue;
  Concept childConcept; 
  List < Concept > concepts = new ArrayList < Concept > ();
}
{
  < OPEN_CONCEPT > < ID > idValue = < STRING > < END_ELEMENT > 
  < OPEN_CODE > codeValue = getCode() < CLOSE_CODE > 
  < OPEN_LABEL > labelValue = getValue() < CLOSE_LABEL >
  (
    < OPEN_CONCEPTS >
    (
      childConcept = concept()
      {
        concepts.add(childConcept);
      }
    )+
    < CLOSE_CONCEPTS >
  )?
  < CLOSE_CONCEPT >
  {
    if(codeValue.equals(nombreCategoria)) {
      conceptLabel = idValue.image;
      conceptsList.add(new Concept(idValue.image.replace("\"", ""), codeValue, labelValue, concepts));
	}
	return new Concept(idValue.image.replace("\"", ""), codeValue, labelValue, concepts);
  }
}


void dataset() :
{
  Token idDataset, idConcept;
  String title;
  String description = "";
  String keyword = "";
  String theme = "";
  String publisher = "";
  List < IdConcept > idConcepts = new ArrayList < IdConcept > ();
} 
{
  < OPEN_DATASET > < ID > idDataset = < STRING > < END_ELEMENT > 
  < OPEN_TITLE > title = getValue() < CLOSE_TITLE > 
  (< OPEN_DESCRIPTION > description = getValue() < CLOSE_DESCRIPTION >)?
  (< OPEN_KEYWORD >  keyword = getValue() < CLOSE_KEYWORD >)?
  (< OPEN_THEME > theme = getValue() < CLOSE_THEME >)?
  (< OPEN_PUBLISHER > publisher = getValue() < CLOSE_PUBLISHER >)?
  (
    < OPEN_CONCEPTS >
    (
       < OPEN_CONCEPT > < ID > idConcept = < STRING > < END_ELEMENT >
      {
        idConcepts.add(new IdConcept(idConcept.image));
      }
    )+
    < CLOSE_CONCEPTS >
  )?
  < CLOSE_DATASET >
  {
    for(IdConcept ic : idConcepts) {
      if(ic.getId().equals(conceptLabel)) {
    	datasetsList.add(new Dataset(idDataset.image.replace("\"", ""), title, description, keyword,theme,publisher,idConcepts));
      }
    }
    //return new Dataset(idDataset.image, title, description, keyword,theme,publisher,idConcepts);
  }

}

String getCode() :
{
  Token t = new Token();
}
{
  (t = < VALUE_CODE >)?
  {
    return t.image.substring(1, t.image.length() - 1);
  }
}

String getValue() :
{
  Token t = new Token();
}
{
  (t = < VALUE_LABEL >)?
  {
    return t.image;
  }
}
