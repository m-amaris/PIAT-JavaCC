options
{
  DEBUG_PARSER = true;
  // DEBUG_TOKEN_MANAGER = true;
}
PARSER_BEGIN(Parser)
package piat.javacc;
public class Parser {}
PARSER_END(Parser)

<*>
SKIP :
{
  " "
| "\t"
| "\r"
}

<*>
TOKEN:
{
  < NUMERO : (["0"-"9"])+ > 
| < LETRA : ["A"-"Z","a"-"z"] >
| < IDENTIFICADOR_TRAZA : "["(["A"-"Z","0"-"9"])+"]:" > 
| < EOL : "\n" > : DEFAULT 
| < "." >
}

TOKEN : 
{
  < FECHA : (["0"-"9"]){4}"-"(["0"-"9"]){2}"-"(["0"-"9"]){2} >  
| < HORA : (["0"-"9"]){2}":"(["0"-"9"]){2}":"(["0"-"9"]){2} > 
| < MSA : "msa" > //: GEN
| < SMTP_IN : "smtp-in" >
| < SMTP_OUT : "smtp-out" > : OUT
| < SEC : ("security-in"|"security-out") >
| < INFECTED : "INFECTED" >
| < SEC_BLOCKED : "SEC-BLOCKED:" >
| < SEC_PASSED : "SEC-PASSED:" >
}

// <GEN>
// TOKEN:
// {
//   < REMIT : (["A"-"Z","a"-"z","0"-"9","_",".","-"])+ >
// | < DOM : "@"(["A"-"Z","a"-"z","0"-"9","_"])+ ("."(["A"-"Z","a"-"z","0"-"9","_"])+)+>
// }

<OUT>
TOKEN:
{
  <RELAY_TO : "relay to:" > 
}

/** Producci√≥n principal. */
void Start() : {}
{
  (Traza() <EOL>)*
  <EOF>
}

/** Una Traza. */
void Traza() : {}
{
  Fecha() Hora() TipoTraza() 
}

/** Un tipo de traza. */
void TipoTraza() : {}
{
  LOOKAHEAD(TrazaGEN())
  TrazaGEN()
| 
  LOOKAHEAD(TrazaIN())
  TrazaIN()
| 
  LOOKAHEAD(TrazaOUT())
  TrazaOUT()
| 
  LOOKAHEAD(TrazaINF())
  TrazaINF()
| 
  LOOKAHEAD(TrazaSPAM())
  TrazaSPAM()
| 
  LOOKAHEAD(TrazaOVER())
  TrazaOVER()
| 
  LOOKAHEAD(TrazaBAD())
  TrazaBAD()
| 
  LOOKAHEAD(TrazaValida())
  TrazaValida()
}

/** Una traza de tipo msa. */
void TrazaGEN() : {}
{
  <MSA> Numero() Identificador() MessageFrom() MessageTo() MessageId() Size()
}

/** Una traza de tipo smtp-in. */
void TrazaIN() : {}
{
  <SMTP_IN> Numero() Identificador() MessageFrom() MessageTo() MessageId() Size()
}

/** Una traza de tipo smtp-out. */
void TrazaOUT() : {}
{
  <SMTP_OUT> Numero() Identificador() RelayTo()
}

/** Una traza de tipo security */
void TrazaINF() : {}
{
  <SEC> Numero() Identificador() Infectado() 
}

/** Una traza de tipo security */
void TrazaSPAM() : {}
{
  <SEC> Numero() Identificador() SpamNoBloq()
}

void TrazaOVER() : {}
{
  TipoServidor() Numero() Identificador() Sobrecarga()
}

void TrazaBAD() : {}
{
  TipoServidor() Numero() Identificador() Nodest()
}

/** Una traza generica. */
void TrazaValida() : {}
{
  TipoServidor() Numero() Identificador() Mensaje()
}

void TipoServidor() : {}
{
  <MSA> | <SMTP_IN> | <SMTP_OUT> | <SEC>
}

/** Una fecha. */
void Fecha() : {}
{
  <FECHA>
}

/** Una hora. */
void Hora() : {}
{
  <HORA>
}

/** Un Numero. */
void Numero() : {}
{
  <NUMERO>
}

void Identificador() : {}
{
  <IDENTIFICADOR_TRAZA>
} 

void MessageFrom() : {}
{
  "message from:" CorreoElectronico()
}

void MessageTo() : {}
{
  "to:" CorreoElectronico()
}

void MessageId() : {}
{
  "message-id:" CorreoElectronico()
}

void RelayTo() : {}
{
  <RELAY_TO> Relay()
}

void Infectado() : {}
{
  "SEC-BLOCKED:" Mensaje()"security-antivirus:" <INFECTED> Mensaje()
}

void SpamNoBloq() : {}
{
  "SEC-PASSED:" Mensaje() "security-antispam:" Mensaje() "SPAM"
}

void Sobrecarga() : {} 
{
  "overload"
}

void Nodest() : {}
{
  "bad destination mailbox address"
}

void Size() : {}
{
  "size:"Numero()
}

void CorreoElectronico() : 
{
  String remitente = "";
  String dominio = "";
  Token t;
}
{
  "<"
  ( t = <LETRA>{remitente += t.image;} | t = <NUMERO>{remitente += t.image;} | t ="_" {remitente += t.image;}| t = "." {remitente += t.image;}| t ="-"{remitente += t.image;} )*
  t="@"
  ( t = <LETRA>{dominio += t.image;} | t = <NUMERO>{dominio += t.image;} | t ="_" {dominio += t.image;}| t = "." {dominio += t.image;}| t ="-"{dominio += t.image;} )*
  ">"{
    // System.out.println(remitente+"@"+dominio);
  }
}

void Relay() : {}
{
  ( <LETRA> | <NUMERO> | "_" | "." | "-" )*
}

void Mensaje() : {}
{
  ( <LETRA> | <NUMERO> | "_" | "." | "-" | ":" | "<" | ">" | "=" | "(" | ")")*
}


