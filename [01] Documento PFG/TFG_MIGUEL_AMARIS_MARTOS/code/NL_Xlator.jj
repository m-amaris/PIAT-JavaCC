options {
	STATIC = false;
}
PARSER_BEGIN(NL_Xlator)
/**
 * New line translator.
 */
public class NL_Xlator
{
  /** Main entry point. */
  public static void main(String args []) throws ParseException
  {
    NL_Xlator parser = new NL_Xlator(System.in);
    parser.ExpressionList();
  }
}

PARSER_END(NL_Xlator)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
} 

TOKEN :
{
  < ID : [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "_", "0"-"9" ])* >
| 
  < NUM : ([ "0"-"9" ])+ >
}

/** Top level production. */
void ExpressionList() :
{
	  double e;
}
{
	  {
	    System.out.println("Please type in an expression followed by a \";\" or ^D to quit:");
	    System.out.println("");
	  }
  (
    e = Expression() ";"
	    {
	      System.out.println("Resultado =" + e);
	      System.out.println("");
	      System.out.println("Please type in another expression followed by a \";\" or ^D to quit:");
	      System.out.println("");
	    }
  )*
  < EOF >
}

/** An Expression. */
double Expression() :
{
	  double e = 0, t = 0;
}
{
  t = Term()
	  {
	    e = t;
	  }
  (
    "+" t = Term()
	    {
	      e = e + t;
	    }
  | 
    "-" t = Term()
	    {
	      e = e - t;
	    }
  )*
  {
    return e;
  }
}

/** A Term. */
double Term() :
{
	  double f = 0, t = 0;
}
{
  f = Factor()
	  {
	    t = f;
	  }
  (
    "*" f = Factor()
	    {
	      t = t * f;
	    }
  | 
    "/" f = Factor()
	    {
	      t = t / f;
	    }
  )*
  {
    return t;
  }
}

/** A Factor. */
double Factor() :
{
	  Token t;
	  double e;
}
{
  t = < NUM >
	  {
	    return Double.parseDouble(t.image);
	  }
| 
  "(" e = Expression() ")"
	  {
	    return e;
	  }
}
