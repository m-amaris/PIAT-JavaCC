options
{
  STATIC = true;
  //UNICODE_INPUT = true;
}

PARSER_BEGIN(XMLParser)
import java.io.*;
public class XMLParser
{
  public static void main(String [] args) throws ParseException
  {
    XMLParser parser;
	    try
    {
		      parser = new XMLParser(new XMLParserTokenManager(new SimpleCharStream(new FileReader(args [0]))));
		      parser.document();
	    }
    catch (FileNotFoundException e)
    {
		      e.printStackTrace();
	    }
  } 
}

PARSER_END(XMLParser)

< CONCEPTS, CONCEPT >
SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

< DEFAULT >
TOKEN :
{
  < OPEN_CONCEPTS : "<concepts>" > : CONCEPTS
}

< CONCEPTS >
TOKEN :
{
  < OPEN_CONCEPT : "<concept" > : CONCEPT
}

< CONCEPTS >
TOKEN :
{
  < CLOSE_CONCEPTS : "</concepts>" > : DEFAULT
}

< CONCEPT >
TOKEN :
{
  < OPEN_CODE : "<code" >
| < CLOSE_CODE : "/code>" >
| < OPEN_LABEL : "<label" >
| < CLOSE_LABEL : "/label>" >
| < VALUE : ">" (~[ "\"", "\n", "\r" ])* "<" >
  //| < TAG_CONTENT : ~[ ] > : CONCEPT
| < CLOSE_CONCEPT : "</concept>" > : CONCEPTS
| < ID : "id=" >
| < STRING : "\"" (~[ "\"", "\n", "\r" ])* "\"" >
| < END_ELEMENT : ">" > : CONCEPT
	}

< DEFAULT >
TOKEN :
{
  < ANYTHING : ~[ ] >
}

void document() :
{}
{
  (
    (< ANYTHING >)
  |
    (
      concepts()
    )
  )*
}

void concepts() :
{}
{
  < OPEN_CONCEPTS >
  (
    concept()
  )*
  < CLOSE_CONCEPTS >
}

void concept() :
{
  Token t;
}
{
  < OPEN_CONCEPT > < ID > t = < STRING >
  {
    System.out.println(t.image);
  }
  < END_ELEMENT > 
  element()  //code
  element() //label
  (
    concepts()
  )?
  < CLOSE_CONCEPT >
}

void element() :
{
  Token t;
}
{
  (
    < OPEN_CODE >
  | < OPEN_LABEL >
  )
  (
    t = < VALUE >
    {
      System.out.println(t.image.substring(1, t.image.length() - 1));
    }
  )*
  (
    < CLOSE_CODE >
  | < CLOSE_LABEL >
  )
}
