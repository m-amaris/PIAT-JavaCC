/* JSONParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. JSONParserTokenManager.java */
import java.io.*;
import java.util.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class JSONParserTokenManager implements JSONParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa1_3(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 64:
         return jjMoveStringLiteralDfa2_3(active0, 0x80L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa3_3(active0, 0x80L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa4_3(active0, 0x80L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_3(active0, 0x80L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa6_3(active0, 0x80L);
      default :
         return 6;
   }
}
private int jjMoveStringLiteralDfa6_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa7_3(active0, 0x80L);
      default :
         return 7;
   }
}
private int jjMoveStringLiteralDfa7_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(7, 7);
         break;
      default :
         return 8;
   }
   return 8;
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa1_5(0x8000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_5(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 64:
         return jjMoveStringLiteralDfa2_5(active0, 0x8000000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa3_5(active0, 0x8000000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_5(active0, 0x8000000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(4, 27);
         break;
      default :
         return 5;
   }
   return 5;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa1_4(0x40000L);
      case 91:
         return jjStopAtPos(0, 19);
      case 93:
         return jjStopAtPos(0, 20);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 64:
         return jjMoveStringLiteralDfa2_4(active0, 0x40000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa3_4(active0, 0x40000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_4(active0, 0x40000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(4, 18);
         break;
      default :
         return 5;
   }
   return 5;
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa1_2(0x3ff00L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 64:
         return jjMoveStringLiteralDfa2_2(active0, 0x100L);
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x9000L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x6000L);
      case 111:
         return jjMoveStringLiteralDfa2_2(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa2_2(active0, 0x20800L);
      case 116:
         return jjMoveStringLiteralDfa2_2(active0, 0x200L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x20400L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa3_2(active0, 0x11000L);
      case 116:
         return jjMoveStringLiteralDfa3_2(active0, 0x900L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa4_2(active0, 0x1000L);
      case 103:
         return jjMoveStringLiteralDfa4_2(active0, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa4_2(active0, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa4_2(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa4_2(active0, 0x20800L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0x2200L);
      case 121:
         return jjMoveStringLiteralDfa4_2(active0, 0x100L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0x11400L);
      case 101:
         return jjMoveStringLiteralDfa5_2(active0, 0x8800L);
      case 103:
         return jjMoveStringLiteralDfa5_2(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa5_2(active0, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa5_2(active0, 0x100L);
      case 118:
         return jjMoveStringLiteralDfa5_2(active0, 0x20000L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         break;
      case 101:
         return jjMoveStringLiteralDfa6_2(active0, 0xb00L);
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0x24000L);
      case 110:
         return jjMoveStringLiteralDfa6_2(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa6_2(active0, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa6_2(active0, 0x2400L);
      default :
         return 6;
   }
   return 6;
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(6, 8);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(6, 9);
         break;
      case 99:
         return jjMoveStringLiteralDfa7_2(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa7_2(active0, 0x18400L);
      case 116:
         return jjMoveStringLiteralDfa7_2(active0, 0x4800L);
      case 117:
         return jjMoveStringLiteralDfa7_2(active0, 0x2000L);
      default :
         return 7;
   }
   return 7;
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_2(active0, 0x800L);
      case 98:
         return jjMoveStringLiteralDfa8_2(active0, 0x8000L);
      case 100:
         return jjMoveStringLiteralDfa8_2(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa8_2(active0, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa8_2(active0, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa8_2(active0, 0x4000L);
      case 122:
         return jjMoveStringLiteralDfa8_2(active0, 0x10000L);
      default :
         return 8;
   }
}
private int jjMoveStringLiteralDfa8_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_2(active0, 0x10800L);
      case 100:
         return jjMoveStringLiteralDfa9_2(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa9_2(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa9_2(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa9_2(active0, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa9_2(active0, 0x20000L);
      default :
         return 9;
   }
}
private int jjMoveStringLiteralDfa9_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(9, 10);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(9, 13);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(9, 17);
         break;
      case 100:
         return jjMoveStringLiteralDfa10_2(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa10_2(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa10_2(active0, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa10_2(active0, 0x10000L);
      default :
         return 10;
   }
   return 10;
}
private int jjMoveStringLiteralDfa10_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(10, 14);
         break;
      case 100:
         return jjMoveStringLiteralDfa11_2(active0, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa11_2(active0, 0x18000L);
      default :
         return 11;
   }
   return 11;
}
private int jjMoveStringLiteralDfa11_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa12_2(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa12_2(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa12_2(active0, 0x8000L);
      default :
         return 12;
   }
}
private int jjMoveStringLiteralDfa12_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa13_2(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa13_2(active0, 0x10000L);
      case 121:
         return jjMoveStringLiteralDfa13_2(active0, 0x8000L);
      default :
         return 13;
   }
}
private int jjMoveStringLiteralDfa13_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(13, 15);
         break;
      case 45:
         return jjMoveStringLiteralDfa14_2(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa14_2(active0, 0x800L);
      default :
         return 14;
   }
   return 14;
}
private int jjMoveStringLiteralDfa14_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 14;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 14;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa15_2(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa15_2(active0, 0x800L);
      default :
         return 15;
   }
}
private int jjMoveStringLiteralDfa15_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 15;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 15;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(15, 11);
         break;
      case 97:
         return jjMoveStringLiteralDfa16_2(active0, 0x10000L);
      default :
         return 16;
   }
   return 16;
}
private int jjMoveStringLiteralDfa16_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 16;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 16;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa17_2(active0, 0x10000L);
      default :
         return 17;
   }
}
private int jjMoveStringLiteralDfa17_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 17;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 17;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa18_2(active0, 0x10000L);
      default :
         return 18;
   }
}
private int jjMoveStringLiteralDfa18_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return 18;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 18;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(18, 16);
         break;
      default :
         return 19;
   }
   return 19;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa1_1(0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x1000000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x6000000L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 24);
         break;
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 26);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(4, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(4, 5); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 34 && kind > 21)
                     kind = 21;
                  break;
               case 3:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 6:
                  if (curChar == 46)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(7); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\42\100\147\162\141\160\150\42", 
"\42\100\164\171\160\145\42", "\42\164\151\164\154\145\42", "\42\162\145\154\141\164\151\157\156\42", 
"\42\163\164\162\145\145\164\55\141\144\144\162\145\163\163\42", "\42\141\162\145\141\42", "\42\154\141\164\151\164\165\144\145\42", 
"\42\154\157\156\147\151\164\165\144\145\42", "\42\141\143\143\145\163\151\142\151\154\151\164\171\42", 
"\42\157\162\147\141\156\151\172\141\164\151\157\156\55\156\141\155\145\42", "\42\163\145\162\166\151\143\145\163\42", "\42\100\151\144\42", "\133", 
"\135", null, null, null, "\164\162\165\145", "\146\141\154\163\145", 
"\156\165\154\154", "\42\100\151\144\42", null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   4, 5, 6, 1, 2, 
};

int curLexState = 3;
int defaultLexState = 3;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 58 && (0x400100100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 58 && (0x400100100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 58 && (0x400100100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 28)
       {
          jjmatchedKind = 28;
       }
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       if (jjmatchedPos == 0 && jjmatchedKind > 28)
       {
          jjmatchedKind = 28;
       }
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       if (jjmatchedPos == 0 && jjmatchedKind > 28)
       {
          jjmatchedKind = 28;
       }
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       if (jjmatchedPos == 0 && jjmatchedKind > 28)
       {
          jjmatchedKind = 28;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public JSONParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public JSONParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 9; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 6 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "ARRAYGRAPH",
   "DETECT",
   "INRESOURCE",
   "DEFAULT",
   "GRAPH",
   "INAREA",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 4, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, -1, 3, 2, 2, 2, 2, 
   2, 2, 1, -1, 
};
static final long[] jjtoToken = {
   0xfffff81L, 
};
static final long[] jjtoSkip = {
   0x1000007eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[9];
    private final int[] jjstateSet = new int[2 * 9];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
