options
{
  STATIC = false;
  JAVA_TEMPLATE_TYPE = "modern";
}

PARSER_BEGIN(JSONParser)
import java.io.*;
import java.util.*;
public class JSONParser
{
  public static void main(String [] args) throws ParseException
  {
    JSONParser parser;
    try
    {
      parser = new JSONParser(new JSONParserTokenManager(new SimpleCharStream(new StreamProvider(new FileInputStream(args[0]), "UTF-8"))));
      List < Resource > json = parser.document();
	  System.out.println(json);
    }
    catch (IOException e) 
    {
      e.printStackTrace();
    }
    
  }
}

PARSER_END(JSONParser)
///////////////////////////////////////////////////////////////////////////////////

< ARRAYGRAPH,DETECT,INRESOURCE>
SKIP :
{
  " " 
| "\t" 
| "\r" 
| "\n"
| ","
| ":"
}
< ENDOFRESOURCE>
SKIP :
{
  " " 
| "\t" 
| "\r" 
| "\n"
| ":"
| "}"
| "]" : DEFAULT
}

TOKEN :
{
  < GRAPHS : "\"@graph\"" > : GRAPH
}



< INRESOURCE>
TOKEN:
{
  < CONCEPT_ID : "\"@type\"" > : DETECT
| < TITLE : "\"title\"">: DETECT
| < LINK : "\"relation\"">: DETECT
| < EVENT_LOCATION : "\"street-address\"">: DETECT
| < AREA : "\"area\""> : INAREA 
| < LATITUDE : "\"latitude\"">: DETECT
| < LONGITUDE : "\"longitude\"">: DETECT
| < ACCESIBILITY : "\"accesibility\"">: DETECT
| < ORGANIZATION_NAME : "\"organization-name\""> : ENDOFRESOURCE
| < DESCRIPTION : "\"services\"">: DETECT

}

< ENDOFRESOURCE >
TOKEN:
{
   < COMMA : "," > :GRAPH
|  < ORGANIZATION_STRING : "\"" (~["\"", "\n", "\r"]) * "\"">
}

< GRAPH > 
TOKEN :
{
  < ID_RESOURCE: "\"@id\"" > : DETECT
//  < OBJECT_START : "{" > 
| < ARRAY_START : "[" >
| < ARRAY_END : "]" > : DEFAULT
}



< DETECT>
TOKEN:
{
  < STRING : "\"" (~["\"", "\n", "\r"]) * "\"" > :INRESOURCE
| < INTEGER : ("-") ? (["0" - "9"]) + > :INRESOURCE
| < DOUBLE : ("-") ? (["0" - "9"]) + ("." (["0" - "9"]) +) > :INRESOURCE
| < TRUE : "true" > :INRESOURCE
| < FALSE : "false" > :INRESOURCE
| < NULL : "null" >:INRESOURCE

}

< INAREA>
TOKEN: {
  < ID_AREA: "\"@id\"" > : DETECT
}

< DEFAULT, GRAPH, INRESOURCE, INAREA> 
SKIP :
{
  < ~[] >
}

///////////////////////////////////////////////////////////////////////////////////
List < Resource > document() :
{
  List < Resource > resourceList;
}
{
  (< GRAPHS > resourceList = arrayGraph())
  
  {return resourceList;}
}



List < Resource > arrayGraph() :
{
  List < Resource > resourceList = new ArrayList < Resource >();
  Resource r;
}
{
  < ARRAY_START > 
  (r = resource(){resourceList.add(r);})*
  //< ARRAY_END >
  
  {return resourceList;}
}

Resource resource() :
{
  Resource r = new Resource();
  Token t;
}
{
  //< OBJECT_START >
  (< ID_RESOURCE > t = < STRING >){System.out.println("@id : "+t.image);r.setResourceId(t.image);}
  (< CONCEPT_ID >  t = < STRING >){System.out.println("@type : "+t.image);r.setConceptId(t.image);}
  (< TITLE >  t = < STRING >){System.out.println("title : "+t.image);r.setTitle(t.image);}
  (< LINK >  t = < STRING >){System.out.println("relation : "+t.image);r.setLink(t.image);}
  
  (< AREA>(< ID_AREA > t = < STRING >){System.out.println("area : "+t.image);r.setEventLocation(t.image);})?
  (< EVENT_LOCATION >  t = < STRING >){System.out.println("street-address : "+t.image);r.setEventLocation(t.image);}
  (< LATITUDE >  t = < DOUBLE >){System.out.println("latitude : "+Double.parseDouble(t.image));r.setLatitude(Double.parseDouble(t.image));}
  (< LONGITUDE >  t = < DOUBLE >){System.out.println("longitude : "+Double.parseDouble(t.image));r.setLongitude(Double.parseDouble(t.image));}
  (< ACCESIBILITY >  t = < STRING >){System.out.println("accesibility : "+t.image);r.setAccesibility(t.image);}
  (< DESCRIPTION >  t = < STRING >){System.out.println("services : "+t.image);r.setDescription(t.image);}
  (< ORGANIZATION_NAME >t = < ORGANIZATION_STRING >){System.out.println("organization-name : "+t.image);r.setOrganizationName(t.image);}
  (< COMMA > )?
  
//< OBJECT_END >
  {return r;}
}

