/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
/* Analizador de codigo txt*/
package Analizador;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MAIN = 5;
  /** RegularExpression Id. */
  int INT = 6;
  /** RegularExpression Id. */
  int FLOAT = 7;
  /** RegularExpression Id. */
  int DOUBLE = 8;
  /** RegularExpression Id. */
  int STRING = 9;
  /** RegularExpression Id. */
  int CHAR = 10;
  /** RegularExpression Id. */
  int IF = 11;
  /** RegularExpression Id. */
  int ELSE = 12;
  /** RegularExpression Id. */
  int WHILE = 13;
  /** RegularExpression Id. */
  int DO = 14;
  /** RegularExpression Id. */
  int FOR = 15;
  /** RegularExpression Id. */
  int SWITCH = 16;
  /** RegularExpression Id. */
  int BREAK = 17;
  /** RegularExpression Id. */
  int VOID = 18;
  /** RegularExpression Id. */
  int RETURN = 19;
  /** RegularExpression Id. */
  int STRUCT = 20;
  /** RegularExpression Id. */
  int USING = 21;
  /** RegularExpression Id. */
  int NAMESPACE = 22;
  /** RegularExpression Id. */
  int CIN = 23;
  /** RegularExpression Id. */
  int COUT = 24;
  /** RegularExpression Id. */
  int TRUE = 25;
  /** RegularExpression Id. */
  int FALSE = 26;
  /** RegularExpression Id. */
  int NULL = 27;
  /** RegularExpression Id. */
  int INCLUDE_LIBRARY = 28;
  /** RegularExpression Id. */
  int DEFINE = 29;
  /** RegularExpression Id. */
  int STRINGIZING = 30;
  /** RegularExpression Id. */
  int SUM = 31;
  /** RegularExpression Id. */
  int MINUS = 32;
  /** RegularExpression Id. */
  int MULTIPLY = 33;
  /** RegularExpression Id. */
  int DIVIDE = 34;
  /** RegularExpression Id. */
  int REMAINDER = 35;
  /** RegularExpression Id. */
  int ASSING = 36;
  /** RegularExpression Id. */
  int EQUAL_TO = 37;
  /** RegularExpression Id. */
  int LESS_THAN = 38;
  /** RegularExpression Id. */
  int LESS_OR_EQUAL_THAN = 39;
  /** RegularExpression Id. */
  int MORE_THAN = 40;
  /** RegularExpression Id. */
  int MORE_OR_EQUAL_THAN = 41;
  /** RegularExpression Id. */
  int AND = 42;
  /** RegularExpression Id. */
  int OR = 43;
  /** RegularExpression Id. */
  int NOT = 44;
  /** RegularExpression Id. */
  int DOT = 45;
  /** RegularExpression Id. */
  int TWO_DOTS = 46;
  /** RegularExpression Id. */
  int COMMA = 47;
  /** RegularExpression Id. */
  int LEFT_SHIFT = 48;
  /** RegularExpression Id. */
  int RIGHT_SHIFT = 49;
  /** RegularExpression Id. */
  int SCOPE_RESOLUTION = 50;
  /** RegularExpression Id. */
  int INCREMENT = 51;
  /** RegularExpression Id. */
  int DECREMENT = 52;
  /** RegularExpression Id. */
  int BRACE_LEFT = 53;
  /** RegularExpression Id. */
  int BRACE_RIGHT = 54;
  /** RegularExpression Id. */
  int PARENTHESIS_LEFT = 55;
  /** RegularExpression Id. */
  int PARENTHESIS_RIGHT = 56;
  /** RegularExpression Id. */
  int BRACKET_LEFT = 57;
  /** RegularExpression Id. */
  int BRACKET_RIGHT = 58;
  /** RegularExpression Id. */
  int SEMICOLON = 59;
  /** RegularExpression Id. */
  int ID = 60;
  /** RegularExpression Id. */
  int NUMBER = 61;
  /** RegularExpression Id. */
  int CHAIN = 62;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"main\"",
    "\"int\"",
    "\"float\"",
    "\"double\"",
    "\"string\"",
    "\"char\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"for\"",
    "\"switch\"",
    "\"break\"",
    "\"void\"",
    "\"return\"",
    "\"struct\"",
    "\"using\"",
    "\"namespace\"",
    "\"cin\"",
    "\"cout\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"include\"",
    "\"define\"",
    "\"#\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"==\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\".\"",
    "\":\"",
    "\",\"",
    "\"<<\"",
    "\">>\"",
    "\"::\"",
    "\"++\"",
    "\"--\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "<ID>",
    "<NUMBER>",
    "<CHAIN>",
  };

}
