/* XMLParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. XMLParserTokenManager.java */
package piat.opendatasearch;
import java.io.*;
import java.util.List;
import java.util.ArrayList;

/** Token Manager. */
@SuppressWarnings ("unused")
public class XMLParserTokenManager implements XMLParserConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1ffeff8e0L) != 0L)
            return 14;
         if ((active0 & 0x2000000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x1ffeff8e0L);
      case 62:
         return jjStartNfaWithStates_0(0, 37, 1);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x700L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f807c000L);
      case 63:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x1810a0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x200802040L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x300L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2400000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 33);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2020c0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x34000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x20048000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400400L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000300L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x181020L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x90000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8058000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4200000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x62000000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1320L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x24000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4020c0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20c0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x108000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x801020L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(4, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x80300000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4400800L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x24000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000700L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10058000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 58:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 61:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(5, 8);
         break;
      case 62:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(5, 20);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x58000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x20024400L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0xa401020L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x110200080L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x2040L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(6, 21);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(6, 22);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 25);
         break;
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x90026040L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100800000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x8010000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000080L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x1020L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x21000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x4048000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(7, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(7, 28);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(7, 31);
         break;
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x48c00L);
      case 103:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(7, 7);
         break;
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x824000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000200L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x60L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(8, 24);
         break;
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x60L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x86c000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(9, 9);
         break;
      case 62:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(9, 5);
         else if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(9, 6);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(9, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(9, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(9, 18);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(9, 30);
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0xc800L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(10, 14);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(10, 26);
         break;
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000800L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(11, 32);
         break;
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000c00L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(12, 23);
         break;
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000800L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa14_0(active0, 0x800L);
      case 62:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(13, 29);
         break;
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa15_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa16_0(active0, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa17_0(active0, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa18_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa19_0(active0, 0x800L);
      case 61:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(18, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa22_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa23_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa25_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
static private int jjMoveStringLiteralDfa25_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa26_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
static private int jjMoveStringLiteralDfa26_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa27_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
static private int jjMoveStringLiteralDfa27_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa28_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0);
}
static private int jjMoveStringLiteralDfa28_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa29_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0);
}
static private int jjMoveStringLiteralDfa29_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa30_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0);
}
static private int jjMoveStringLiteralDfa30_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa31_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0);
}
static private int jjMoveStringLiteralDfa31_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0);
      return 31;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa32_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0);
}
static private int jjMoveStringLiteralDfa32_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0);
      return 32;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa33_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0);
}
static private int jjMoveStringLiteralDfa33_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0);
      return 33;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa34_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0);
}
static private int jjMoveStringLiteralDfa34_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0);
      return 34;
   }
   switch(curChar)
   {
      case 56:
         return jjMoveStringLiteralDfa35_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0);
}
static private int jjMoveStringLiteralDfa35_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0);
      return 35;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa36_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0);
}
static private int jjMoveStringLiteralDfa36_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0);
      return 36;
   }
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa37_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0);
}
static private int jjMoveStringLiteralDfa37_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0);
      return 37;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(37, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(36, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 19;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 34)
                     { jjCheckNAdd(17); }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 62)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x8ffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 60 && kind > 34)
                     kind = 34;
                  break;
               case 4:
                  if ((0x8ffffffbffffdbffL & l) != 0L)
                     { jjAddStates(0, 1); }
                  break;
               case 5:
                  if (curChar == 62 && kind > 35)
                     kind = 35;
                  break;
               case 14:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 34)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
                  if (curChar == 34 && kind > 36)
                     kind = 36;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(2, 3); }
                  break;
               case 3:
                  if (curChar == 91)
                     { jjCheckNAdd(4); }
                  break;
               case 4:
                  { jjCheckNAddTwoStates(4, 7); }
                  break;
               case 6:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 9:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 17:
                  { jjAddStates(4, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(2, 3); }
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(0, 1); }
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(4, 5); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 19 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\74\143\157\156\143\145\160\164\163\76", 
"\74\144\141\164\141\163\145\164\163\76", "\74\143\141\164\141\154\157\147", "\170\155\154\156\163\75", 
"\170\155\154\156\163\72\170\163\151\75", "\170\163\151\72\163\143\150\145\155\141\114\157\143\141\164\151\157\156\75", 
"\74\77\170\155\154\40\166\145\162\163\151\157\156\75\42\61\56\60\42\40\145\156\143\157\144\151\156\147\75\42\125\124\106\55\70\42\77\76", "\74\143\157\156\143\145\160\164", "\74\144\141\164\141\163\145\164", 
"\74\57\143\157\156\143\145\160\164\163\76", "\74\57\144\141\164\141\163\145\164\163\76", 
"\74\57\143\141\164\141\154\157\147\76", "\74\57\143\157\156\143\145\160\164\76", 
"\74\57\144\141\164\141\163\145\164\76", "\74\143\157\144\145", "\57\143\157\144\145\76", "\74\154\141\142\145\154\76", 
"\74\164\151\164\154\145\76", "\74\144\145\163\143\162\151\160\164\151\157\156\76", 
"\74\153\145\171\167\157\162\144\76", "\74\164\150\145\155\145\76", "\74\160\165\142\154\151\163\150\145\162\76", 
"\74\57\154\141\142\145\154\76", "\74\57\164\151\164\154\145\76", 
"\74\57\144\145\163\143\162\151\160\164\151\157\156\76", "\74\57\153\145\171\167\157\162\144\76", "\74\57\164\150\145\155\145\76", 
"\74\57\160\165\142\154\151\163\150\145\162\76", "\151\144\75", null, null, null, "\76", null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   4, 7, 1, 2, 17, 18, 
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 38)
   {
      jjmatchedKind = 38;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public XMLParserTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public XMLParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 19; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3fffffffe1L, 
};
static final long[] jjtoSkip = {
   0x400000001eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[19];
    static private final int[] jjstateSet = new int[2 * 19];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
