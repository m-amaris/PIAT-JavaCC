/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package piat.javacc;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.*;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

/** Token Manager. */
@SuppressWarnings ("unused")
public class ParserTokenManager implements ParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_1(int pos, long active0){
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      case 0:
         if ((active0 & 0x14000300L) != 0L)
         {
            jjmatchedKind = 11;
            return 19;
         }
         if ((active0 & 0x10L) != 0L)
            return 4;
         if ((active0 & 0x6b400080L) != 0L)
         {
            jjmatchedKind = 11;
            return 0;
         }
         if ((active0 & 0x8L) != 0L)
            return 6;
         return -1;
      case 1:
         if ((active0 & 0x6f400380L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
            return 0;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
            return 18;
         }
         return -1;
      case 2:
         if ((active0 & 0x80L) != 0L)
            return 0;
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
            return 17;
         }
         if ((active0 & 0x6e400300L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
            return 0;
         }
         return -1;
      case 3:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
            return 16;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x6e400300L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
            return 0;
         }
         return -1;
      case 4:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 4;
            return 15;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x6a400300L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 4;
            return 0;
         }
         return -1;
      case 5:
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 5;
            return 14;
         }
         if ((active0 & 0x62400300L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 5;
            return 0;
         }
         return -1;
      case 6:
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 6;
            return 13;
         }
         if ((active0 & 0x62400200L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 6;
            return 0;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
            return 0;
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 7;
            return 12;
         }
         if ((active0 & 0x62400000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 7;
            return 0;
         }
         return -1;
      case 8:
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x62400000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 8;
            return 0;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 8;
            return 11;
         }
         return -1;
      case 9:
         if ((active0 & 0x72400000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 9;
            return 0;
         }
         return -1;
      case 10:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x50400000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 10;
            return 0;
         }
         return -1;
      case 11:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x10400000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 11;
            return 0;
         }
         return -1;
      case 12:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 12;
            return 0;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x400000L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 11;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 13;
            return 0;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x400000L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 11;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 14;
            return 0;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x400000L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 11;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 15;
            return 0;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 16;
            return 0;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 17;
            return 0;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 26:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 27:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 28:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 10:
         return jjStartNfaWithStates_1(0, 3, 6);
      case 13:
         return jjStartNfaWithStates_1(0, 4, 4);
      case 62:
         return jjStopAtPos(0, 23);
      case 83:
         return jjMoveStringLiteralDfa1_1(0x20000000L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x40000000L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x2400080L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x14000300L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x1000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_1(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 1;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x5a400000L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x300L);
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000L);
      case 115:
         return jjMoveStringLiteralDfa2_1(active0, 0x80L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 2;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000L);
      case 67:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000L);
      case 97:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(2, 7, 0);
         break;
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x42400000L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x300L);
      case 122:
         return jjMoveStringLiteralDfa3_1(active0, 0x4000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 3;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000L);
      case 45:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0x300L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x2400000L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 4;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_1(active0, 0x300L);
      case 58:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(4, 26);
         break;
      case 60:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(4, 24);
         break;
      case 80:
         return jjMoveStringLiteralDfa5_1(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x2400000L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000L);
      case 121:
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(3, active0);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 5;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000L);
      case 65:
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000L);
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x2400000L);
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x10000100L);
      case 110:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000L);
      case 111:
         return jjMoveStringLiteralDfa6_1(active0, 0x200L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(4, active0);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 6;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa7_1(active0, 0x2400000L);
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(6, 8, 0);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_1(active0, 0x18000000L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x200L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(5, active0);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 7;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_1(active0, 0x2400000L);
      case 83:
         return jjMoveStringLiteralDfa8_1(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa8_1(active0, 0x8000000L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(7, 9, 0);
         return jjMoveStringLiteralDfa8_1(active0, 0x40000000L);
      case 121:
         return jjMoveStringLiteralDfa8_1(active0, 0x10000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(6, active0);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 8;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_1(active0, 0x10000000L);
      case 58:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(8, 27);
         break;
      case 69:
         return jjMoveStringLiteralDfa9_1(active0, 0x20000000L);
      case 102:
         return jjMoveStringLiteralDfa9_1(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x42000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(7, active0);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 9;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa10_1(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa10_1(active0, 0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa10_1(active0, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa10_1(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa10_1(active0, 0x400000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(8, active0);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 10;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(10, 25);
         return jjMoveStringLiteralDfa11_1(active0, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa11_1(active0, 0x50000000L);
      case 111:
         return jjMoveStringLiteralDfa11_1(active0, 0x400000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(9, active0);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 11;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_1(active0, 0x60000000L);
      case 109:
         return jjMoveStringLiteralDfa12_1(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa12_1(active0, 0x10000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(10, active0);
}
private int jjMoveStringLiteralDfa12_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(10, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 12;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa13_1(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa13_1(active0, 0x10000000L);
      case 109:
         return jjMoveStringLiteralDfa13_1(active0, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa13_1(active0, 0x20000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(11, active0);
}
private int jjMoveStringLiteralDfa13_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(11, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 13;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa14_1(active0, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa14_1(active0, 0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa14_1(active0, 0x20000000L);
      case 118:
         return jjMoveStringLiteralDfa14_1(active0, 0x10000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(12, active0);
}
private int jjMoveStringLiteralDfa14_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(12, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(13, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 14;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 60:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(14, 22);
         break;
      case 99:
         return jjMoveStringLiteralDfa15_1(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa15_1(active0, 0x50000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(13, active0);
}
private int jjMoveStringLiteralDfa15_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(13, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(14, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 15;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa16_1(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa16_1(active0, 0x10000000L);
      case 117:
         return jjMoveStringLiteralDfa16_1(active0, 0x20000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(14, active0);
}
private int jjMoveStringLiteralDfa16_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(14, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(15, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 16;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa17_1(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa17_1(active0, 0x20000000L);
      case 117:
         return jjMoveStringLiteralDfa17_1(active0, 0x10000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(15, active0);
}
private int jjMoveStringLiteralDfa17_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(15, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(16, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 17;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa18_1(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa18_1(active0, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa18_1(active0, 0x10000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(16, active0);
}
private int jjMoveStringLiteralDfa18_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(16, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(17, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 18;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(18, 28);
         break;
      case 116:
         return jjMoveStringLiteralDfa19_1(active0, 0x20000000L);
      case 120:
         return jjMoveStringLiteralDfa19_1(active0, 0x40000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(17, active0);
}
private int jjMoveStringLiteralDfa19_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(17, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(18, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 19;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_1(active0, 0x40000000L);
      case 121:
         return jjMoveStringLiteralDfa20_1(active0, 0x20000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(18, active0);
}
private int jjMoveStringLiteralDfa20_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(18, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(19, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 20;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa21_1(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa21_1(active0, 0x40000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(19, active0);
}
private int jjMoveStringLiteralDfa21_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(19, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(20, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 21;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa22_1(active0, 0x20000000L);
      case 100:
         return jjMoveStringLiteralDfa22_1(active0, 0x40000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(20, active0);
}
private int jjMoveStringLiteralDfa22_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(20, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(21, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 22;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa23_1(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa23_1(active0, 0x20000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(21, active0);
}
private int jjMoveStringLiteralDfa23_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(21, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(22, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 23;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa24_1(active0, 0x40000000L);
      case 116:
         return jjMoveStringLiteralDfa24_1(active0, 0x20000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(22, active0);
}
private int jjMoveStringLiteralDfa24_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(22, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(23, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 24;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa25_1(active0, 0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa25_1(active0, 0x20000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(23, active0);
}
private int jjMoveStringLiteralDfa25_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(23, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(24, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 25;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa26_1(active0, 0x60000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(24, active0);
}
private int jjMoveStringLiteralDfa26_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(24, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(25, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 26;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa27_1(active0, 0x20000000L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(26, 30);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(25, active0);
}
private int jjMoveStringLiteralDfa27_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(25, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(26, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 27;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa28_1(active0, 0x20000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(26, active0);
}
private int jjMoveStringLiteralDfa28_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(26, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(27, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 28;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa29_1(active0, 0x20000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(27, active0);
}
private int jjMoveStringLiteralDfa29_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(27, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(28, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 29;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(29, 29);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_1(28, active0);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 49;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(0); }
                  break;
               case 18:
                  if (curChar != 45)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(0); }
                  break;
               case 11:
                  if (curChar != 45)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(0); }
                  break;
               case 17:
                  if (curChar != 45)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(0); }
                  break;
               case 14:
                  if (curChar != 45)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(0); }
                  break;
               case 16:
                  if (curChar != 45)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(0); }
                  break;
               case 13:
                  if (curChar != 45)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(0); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 15:
                  if (curChar != 45)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(0); }
                  break;
               case 12:
                  if (curChar == 45)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 22;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(3, 4); }
                  break;
               case 4:
                  if (curChar == 10 && kind > 14)
                     kind = 14;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 13 && kind > 14)
                     kind = 14;
                  break;
               case 7:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x2400L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 23:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(48); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 29;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 28;
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 27;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 24;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 26;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 23;
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAdd(0); }
                  }
                  else if (curChar == 91)
                     { jjCheckNAdd(2); }
                  if (curChar == 115)
                     { jjAddStates(5, 6); }
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 25;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 12:
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(2, 3); }
                  break;
               case 3:
                  if (curChar == 93)
                     kind = 13;
                  break;
               case 9:
                  if (curChar == 115)
                     { jjAddStates(5, 6); }
                  break;
               case 10:
                  if (curChar == 110 && kind > 10)
                     kind = 10;
                  break;
               case 20:
                  if (curChar == 116 && kind > 10)
                     kind = 10;
                  break;
               case 21:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 49 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0){
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 58:
         return jjStopAtPos(0, 21);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 1;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 2;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 3;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 77:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(3, 16);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 4;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 5;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 6;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 7;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(7, 15);
         break;
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(7, 17);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 60)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 4:
                  if (curChar == 46)
                     { jjCheckNAdd(5); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 6:
                  if (curChar == 62)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 64)
                     { jjCheckNAdd(3); }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\155\163\141", 
"\163\155\164\160\55\151\156", "\163\155\164\160\55\157\165\164", null, null, null, null, null, 
"\111\116\106\105\103\124\105\104", "\123\120\101\115", "\157\166\145\162\154\157\141\144", "\142\141\144", null, 
null, "\72", "\155\145\163\163\141\147\145\55\146\162\157\155\72\40\74", "\76", 
"\164\157\72\40\74", "\155\145\163\163\141\147\145\55\151\144\72", "\163\151\172\145\72", 
"\162\145\154\141\171\40\164\157\72", "\163\145\143\165\162\151\164\171\55\141\156\164\151\166\151\162\165\163\72", 
"\123\105\103\55\120\101\123\123\105\104\72\40\163\145\143\165\162\151\164\171\55\141\156\164\151\163\160\141\155\72", 
"\144\145\163\164\151\156\141\164\151\157\156\40\155\141\151\154\142\157\170\40\141\144\144\162\145\163\163", null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   32, 41, 48, 2, 3, 19, 30, 4, 5, 6, 
};

int curLexState = 1;
int defaultLexState = 1;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      debugStream.println("Returning the <EOF> token.\n");
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
       {
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Skipping character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ")");
             curChar = input_stream.BeginToken();
       }
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 31)
       {
           debugStream.println("   Current character matched as a " + tokenImage[31] + " token.");
          jjmatchedKind = 31;
       }
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
       {
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Skipping character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ")");
             curChar = input_stream.BeginToken();
       }
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrException.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 31)
       {
           debugStream.println("   Current character matched as a " + tokenImage[31] + " token.");
          jjmatchedKind = 31;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
        {
           debugStream.println("   Putting back " + (curPos - jjmatchedPos - 1) + " characters into the input stream.");
           input_stream.backup(curPos - jjmatchedPos - 1);
        }
    debugStream.println("****** FOUND A " + tokenImage[jjmatchedKind] + " MATCH (" + TokenMgrException.addEscapes(new String(input_stream.GetSuffix(jjmatchedPos + 1))) + ") ******\n");
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

protected static final int[][][] statesForState = {
 {
   { 0, 2, },
   { 1 },
   { 0, 2, },
   { 3 },
   { 4 },
   { 5 },
   { 6 },
},
 {
   { 11, 22, 0, },
   { 0, 1, 5, 7, 8, 9, 31, },
   { 2 },
   { 3 },
   { 4 },
   { 0, 1, 5, 7, 8, 9, 31, },
   { 6 },
   { 0, 1, 5, 7, 8, 9, 31, },
   { 0, 1, 5, 7, 8, 9, 31, },
   { 0, 1, 5, 7, 8, 9, 31, },
   { 10 },
   { 11, 22, 0, },
   { 12, 23, 0, },
   { 13, 24, 0, },
   { 14, 25, 0, },
   { 15, 26, 0, },
   { 16, 27, 0, },
   { 17, 28, 0, },
   { 18, 29, 0, },
   { 19, 30, 0, },
   { 20 },
   { 21 },
   { 11, 22, 0, },
   { 12, 23, 0, },
   { 13, 24, 0, },
   { 14, 25, 0, },
   { 15, 26, 0, },
   { 16, 27, 0, },
   { 17, 28, 0, },
   { 18, 29, 0, },
   { 19, 30, 0, },
   { 0, 1, 5, 7, 8, 9, 31, },
   { 32 },
   { 33 },
   { 34 },
   { 35 },
   { 36 },
   { 37 },
   { 38 },
   { 39 },
   { 40 },
   { 41 },
   { 42 },
   { 43 },
   { 44 },
   { 45 },
   { 46 },
   { 47 },
   { 48 },
},

};
protected static final int[][] kindForState = {
{ 
  19, 
  19, 
  20, 
  20, 
  20, 
  20, 
  20, },
{ 
  11, 
  13, 
  13, 
  13, 
  14, 
  14, 
  14, 
  14, 
  14, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  10, 
  5, 
  5, 
  5, 
  5, 
  5, 
  5, 
  5, 
  5, 
  5, 
  5, 
  6, 
  6, 
  6, 
  6, 
  6, 
  6, 
  6, 
  12, }
};
  int kindCnt = 0;
  protected final String jjKindsForBitVector(int i, long vec)
  {
    String retVal = "";
    if (i == 0)
       kindCnt = 0;
    for (int j = 0; j < 64; j++)
    {
       if ((vec & (1L << j)) != 0L)
       {
          if (kindCnt++ > 0)
             retVal += ", ";
          if (kindCnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[i * 64 + j];
       }
    }
    return retVal;
  }


  protected final String jjKindsForStateVector(int lexState, int[] vec, int start, int end)
  {
    boolean[] kindDone = new boolean[32];
    String retVal = "";
    int cnt = 0;
    for (int i = start; i < end; i++)
    {
     if (vec[i] == -1)
       continue;
     int[] stateSet = statesForState[curLexState][vec[i]];
     for (int j = 0; j < stateSet.length; j++)
     {
       int state = stateSet[j];
       if (!kindDone[kindForState[lexState][state]])
       {
          kindDone[kindForState[lexState][state]] = true;
          if (cnt++ > 0)
             retVal += ", ";
          if (cnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[kindForState[lexState][state]];
       }
     }
    }
    if (cnt == 0)
       return "{  }";
    else
       return "{ " + retVal + " }";
  }


void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 49; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "EN_TRAZA",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[49];
    private final int[] jjstateSet = new int[2 * 49];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
