/**
 * Esta clase JSONParser se encarga de analizar un archivo JSON y reconocer su estructura para imprimirlo por pantalla.
 */
options
{
  STATIC = false;
  JAVA_TEMPLATE_TYPE = "modern";
  UNICODE_INPUT = true; // Esta opcion permite que el intérpreta sea capaz de reconocer caracteres Unicode extendidos
}

PARSER_BEGIN(JSONParser)
package piat.opendatasearch;
import java.io.*;
import java.util.*;
import com.google.gson.*;
import java.net.URL;

/**
 * Esta clase implementa un analizador de archivos JSON para descargarlos de internet y procesarlos.
 */
public class JSONParser implements Runnable
{
    private String fichero;
    private List<String> lConcepts;
    private Map<String, JsonArray> mDatasetConcepts;
    private String nombreHilo;

    /**
     * Constructor de la clase JSONParser.
     *
     * @param fichero          La URL del archivo JSON que se va a descargar y analizar.
     * @param lConcepts        Lista de conceptos a buscar en los objetos JSON.
     * @param mDatasetConcepts Mapa donde se almacenan los resultados del análisis.
     */
    public JSONParser(String fichero, List<String> lConcepts, Map<String, JsonArray> mDatasetConcepts)
    {
        this.fichero = fichero;
        this.lConcepts = lConcepts;
        this.mDatasetConcepts = mDatasetConcepts;
    }

    @Override
    public void run()
    {
        JsonArray jsonArray = new JsonArray();
        Thread.currentThread().setName("JSON " + fichero);
        nombreHilo = "[" + Thread.currentThread().getName() + "] ";
        System.out.println(nombreHilo + "Empezar a descargar de internet el JSON");
        try
        {
            InputStream inputStream = new URL(fichero).openStream();
            JSONParser parser = new JSONParser(new JSONParserTokenManager(new SimpleCharStream(new StreamProvider(inputStream, "UTF-8"))));
            JsonElement json = parser.json();
            if (json != null && json.isJsonObject())
            {
                JsonObject jsonObject = json.getAsJsonObject();
                if (jsonObject.has("@graph"))
                {
                    jsonArray = jsonObject.getAsJsonArray("@graph");
                    jsonArray = processGraphArray(jsonArray, lConcepts);
                }
                else
                {
                    jsonArray = new JsonArray();
                }
            }
            inputStream.close();
        }
        catch (ParseException e)
        {
            System.out.println(e.getMessage());
        }
        catch (FileNotFoundException e)
        {
            System.out.println(nombreHilo + "El fichero no existe. Ignorándolo");
        }
        catch (IOException e)
        {
            System.out.println(nombreHilo + "Hubo un problema al abrir el fichero. Ignorándolo" + e);
        }
        mDatasetConcepts.put(fichero, jsonArray);
    }

    /**
     * Procesa el array @graph y retorna un nuevo array con los primeros cinco objetos.
     *
     * @param graphArray  El array JSON a procesar.
     * @param lConcepts   Lista de conceptos a buscar en los objetos JSON.
     * @return Un nuevo array con los primeros cinco objetos que cumplen con las condiciones.
     */
    private static JsonArray processGraphArray(JsonArray graphArray, List<String> lConcepts)
    {
        JsonArray processedArray = new JsonArray();
        int maxObjects = 5;
        for (JsonElement element : graphArray)
        {
            if (element.isJsonObject())
            {
                JsonObject jsonObject = element.getAsJsonObject();
                if (jsonObject.has("@type"))
                {
                    String type = jsonObject.get("@type").getAsString();
                    if (lConcepts.contains(type) && processedArray.size() < maxObjects)
                    {
                        processedArray.add(jsonObject);
                    }
                }
            }
            if (processedArray.size() >= maxObjects)
            {
                break;
            }
        }
        return processedArray;
    }
}

PARSER_END(JSONParser)

/**
 * Definicion de tokens a omitir.
 */
SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

/**
 * Definicion de tokens JSON.
 */
TOKEN :
{
  < OBJECT_START : "{" >
| < OBJECT_END : "}" >
| < ARRAY_START : "[" >
| < ARRAY_END : "]" >
| < STRING : "\"" (~[ "\"", "\n", "\r" ])* "\"" >
| < INTEGER : ("-")? ([ "0"-"9" ])+ >
| < DOUBLE :
    ("-")? ([ "0"-"9" ])+
    (
      "." ([ "0"-"9" ])+
    ) >
| < TRUE : "true" >
| < FALSE : "false" >
| < NULL : "null" >
| < COMMA : "," >
| < COLON : ":" >
}

/**
 * Metodo para analizar un elemento JSON.
 * @return Elemento JSON analizado.
 */
JsonElement json() :
{
  JsonElement j;
}
{
  (j = object()| j = array())
  {
    return j;
  }
}

/**
 * Metodo para analizar un objeto JSON.
 * @return Objeto JSON analizado.
 */
JsonObject object() :
{
  AbstractMap.SimpleEntry<String, JsonElement> p;
  JsonObject o = new JsonObject();
}
{
  < OBJECT_START >
  (
    p = pair()
    {
      o.add(p.getKey(), p.getValue()); // Obtener la pareja clave-valor JSON y añadirlo al objeto JSON
    }
    (
      < COMMA > p = pair()
      {
        o.add(p.getKey(), p.getValue());
      }
    )*
  )?
  < OBJECT_END >
  {
    return o;
  }
}

/**
 * Metodo para analizar un array JSON.
 * @return Array JSON analizado.
 */
JsonArray array() :
{
  JsonObject o;
  JsonArray a = new JsonArray();
}
{
  < ARRAY_START >
  (
    o = object()
    {
      a.add(o); // Obtener el objeto JSON y añadirlo al array JSON
    }
    (
      < COMMA > o = object()
      {
        a.add(o);
      }
    )*
  )?
  < ARRAY_END >
  {
    return a;
  }
}

/**
 * Metodo para analizar una pareja clave-valor JSON.
 * @return Pareja clave-valor analizada.
 */
AbstractMap.SimpleEntry<String, JsonElement> pair() :
{
  JsonElement e;
  Token t;
}
{
  t = < STRING > < COLON > e = value()
  {
        return new AbstractMap.SimpleEntry<String, JsonElement>(t.image.substring(1, t.image.length() - 1), e); // Obtener los elementos JSON y añadirlos a la pareja clave-valor JSON 
  }
}

/**
 * Metodo para analizar un valor JSON.
 * @return Valor JSON analizado.
 */
JsonElement value() :
{
  Token t;
  JsonElement e;
}
{
  (
    t = < STRING >
    {
      e = new JsonPrimitive(t.image.substring(1, t.image.length() - 1));
    }
  | t = < INTEGER >
    {
      e = new JsonPrimitive(Integer.parseInt(t.image));
    }
  | t = < DOUBLE >
    {
      e = new JsonPrimitive(Double.parseDouble(t.image));
    }
  | < TRUE >
    {
      e = new JsonPrimitive(true);
    }
  | < FALSE >
    {
      e = new JsonPrimitive(false);
    }
  | t = < NULL >
    {
      e = JsonNull.INSTANCE;
    }
  | e = object()
    {
      //return e;
    }
  | e = array()
    {
      //return e;
    }
  )
  {
    return e;
  }
}
