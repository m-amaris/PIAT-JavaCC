options
{
  STATIC = true;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(XMLParser)
import java.io.*;
public class XMLParser
{
  public static void main(String [] args) throws ParseException
  {
    XMLParser parser;
	    try
    {
		      parser = new XMLParser(new XMLParserTokenManager(new SimpleCharStream(new FileReader(args [0]))));
		      parser.document();
	    }
    catch (FileNotFoundException e)
    {
		      e.printStackTrace();
	    }
  }
}

PARSER_END(XMLParser)

<* >
SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

< CONCEPTS >
TOKEN :
{
  < CLOSE_CONCEPTS : "</concepts>" > : DEFAULT
| < OPEN_CONCEPT : "<concept>" > : CONCEPT
}

< CONCEPT >
TOKEN :
{
  < OPEN_CODE : "<code>" > : CONCEPT
| < CLOSE_CODE : "</code>" > : CONCEPT
| < OPEN_LABEL : "<label>" > : CONCEPT
| < CLOSE_LABEL : "</label>" > : CONCEPT
| < TAG_CONTENT : ~[ ] > : CONCEPT
	}

< DEFAULT, CONCEPT >
TOKEN :
{
  < OPEN_CONCEPTS : "<concepts>" > : CONCEPTS
}

< CONCEPT, CONCEPTS >
TOKEN :
{
	  < CLOSE_CONCEPT : "</concept>" > : CONCEPTS
}

void document() :
{}
{
  (
    concepts()
  )*
  < EOF >
}

void concepts() :
{
}
{
  < OPEN_CONCEPTS >
  (
    concept()
  )*
  < CLOSE_CONCEPTS >
}

void concept() :
{}
{
  < OPEN_CONCEPT >
  (
    element()
  )*
  (
    concepts()
  )?
  < CLOSE_CONCEPT >
}

void element() :
{
}
{
  (
    (
      < OPEN_CODE > (< TAG_CONTENT >)* < CLOSE_CODE >
    )
  |
    (
      < OPEN_LABEL > (< TAG_CONTENT >)* < CLOSE_LABEL >
    )
  )
}
