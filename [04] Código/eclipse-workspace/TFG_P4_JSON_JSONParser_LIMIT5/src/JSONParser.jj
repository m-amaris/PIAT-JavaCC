options
{
  STATIC = false;
  JAVA_TEMPLATE_TYPE = "modern";
}

PARSER_BEGIN(JSONParser)
import java.io.*;
import java.util.*;
public class JSONParser
{
  public static void main(String [] args) throws ParseException
  {
    JSONParser parser;
    try
    {
      parser = new JSONParser(new JSONParserTokenManager(new SimpleCharStream(new StreamProvider(new FileInputStream(args[0]), "UTF-8"))));
      List < Resource > resourceList = parser.document();
	  System.out.println(resourceList);
    }
    catch (IOException e) 
    {
      e.printStackTrace();
    }
    
  }
}

PARSER_END(JSONParser)

/******************************  ANALIZADOR LÉXICO  ******************************/

/**	Cuando el token @graph es detectado, empieza a analizar el graph.
	Obvia todo excepto el token @graph.
	---------------------------------------------------------------
	When a @graph token is detected, it starts to analyze the graph.
	Skips everything but the @graph token. **/
TOKEN :
{< GRAPHS : "\"@graph\"" > : GRAPH }


/** Cuando el token @id es detectado, empieza a analizar el recurso.
	Cuando el token "]" es detectado, sale del graph.
	Obvia todo excepto los tokens @id, "[" y "]".
	---------------------------------------------------------------
	When the @id token is detected, it starts to analyze the resource.
	When the "]" token is detected, it exits the graph.
	Skips everything but the @id, "[", "]" tokens. **/
< GRAPH > 
TOKEN :
{
  < IDRESOURCE: "\"@id\"" > : GETVALUE
| < ARRAY_START : "[" > 
| < ARRAY_END : "]" > : DEFAULT
}


/** Analiza los tokens que nos interesan dentro del recurso.
	Cuando el token "organization-name" es detectado, le dice al analizador léxico que el recurso va a terminar (RESOURCE_END).
	Cuando el token "area" es detectado, cambia el estado léxico para detectar el token @id dentro de "area" (INAREA).
	Obvia todo excepto los tokens que nos interesan.
	---------------------------------------------------------------
	Analyzes every token of the resource that we are interested on.
	When the "organization-name" token is detected, it tells the lexical analyzer that the resource is about to end (RESOURCE_END).
	When the "area" token is detected, it changes the lexical state to detect the @id token inside the "area" (INAREA).
	Skips everything but the tokens we are interested on. **/
<RESOURCE>
TOKEN:
{
  < IDCONCEPT : "\"@type\"" > : GETVALUE
| < TITLE : "\"title\"">: GETVALUE
| < DESCRIPTION : "\"description\"">: GETVALUE
| < TIME_START : "\"dtstart\"">: GETVALUE
| < TIME_END : "\"dtend\"">: GETVALUE
| < LINK : "\"link\"">: GETVALUE
| < EVENT_LOCATION : "\"event-location\"">: GETVALUE
| < AREA : "\"area\""> : INAREA 
| < LATITUDE : "\"latitude\"">: GETVALUE
| < LONGITUDE : "\"longitude\"">: GETVALUE
| < ORGANIZATION_NAME : "\"organization-name\""> :GETVALUE 
| < ACCESIBILITY : "\"accesibility\"">: RESOURCE_END
}


/**	Analiza el string del token "organization-name", que es el último token que nos interesa del recurso.
	Cuando el token es detectado, sale del recurso, y vuelve al graph.
	Obvia todo excepto el token ORGANIZATION_STRING
	---------------------------------------------------------------
	Analyze the string of the "organization-name" token, which is the last token we are interested on inside the resource.
	When the token is detected, it exits the resource, and gets back to the graph.
	Skips everything but the ORGANIZATION_STRING token. **/
< RESOURCE_END>
TOKEN: {< ACCESIBILITY_STRING : "\"" (~["\"", "\n", "\r"]) * "\""> : GRAPH}


/**	Estado léxico que recoge el valor del los tokens dentro del recurso.
	Cuando cualquier token es detectado, vuelve al estado de análisis del recurso.
	Obvia todo excepto los tokens que nos interesan.
	---------------------------------------------------------------
	Lexical state that gets the value of tokens in the resource.
	When any token is detected, it jumps back to the analyzing state of the resource .
	Skips everything but the tokens we are interested on. **/
< GETVALUE>
TOKEN:
{
  < STRING : "\"" (~["\"", "\n", "\r"]) * "\"" > :RESOURCE
| < INTEGER : ("-") ? (["0" - "9"]) + > :RESOURCE
| < DOUBLE : ("-") ? (["0" - "9"]) + ("." (["0" - "9"]) +) > :RESOURCE
| < TRUE : "true" > :RESOURCE
| < FALSE : "false" > :RESOURCE
| < NULL : "null" >:RESOURCE
}


/**	Cuando el token @id es detectado dentro del area, recoge su valor.
	Obvia todo excepto el token @id.
	---------------------------------------------------------------
	When the @id token is detected inside the area, it gets the value.
	Skips everything but the @id token. **/
< INAREA>
TOKEN: {< IDAREA: "\"@id\"" > : GETVALUE}


/**	Todo carácter que no es un token, es obviado.
	---------------------------------------------------------------
	Any character that is not a token, it is skipped. **/
< * > 
SKIP :
{< ~[] >}

/****************************  ANALIZADOR SINTÁCTICO  ****************************/

List < Resource > document() :
{
  List < Resource > resourceList = new ArrayList < Resource >();
  Resource r;
  int maxObjects = 9999;
}
{
  (< GRAPHS > < ARRAY_START > 
  (r = resource(){
    resourceList.add(r);
    if (resourceList.size() >= maxObjects){
		token_source.SwitchTo(DEFAULT); // No es muy seguro, es posible que el TokenManager vaya muy por delante del analizador.
										// Pero dado que no queremos analizar nada mas, se puede utilizar sin problemas.
		break;
    }
    })*
  (< ARRAY_END >)?)
  
  {return resourceList;}
}

Resource resource() :
{
  Resource r = new Resource();
  Token t;
}
{
  (< IDRESOURCE > t = < STRING >){r.setResourceId(t.image);}
  (< IDCONCEPT >  t = < STRING >){r.setConceptId(t.image);}
  (< TITLE >  t = < STRING >){r.setTitle(t.image);}
  (< DESCRIPTION >  t = < STRING >){r.setDescription(t.image);}
  (< TIME_START > t = < STRING > {r.setStartDate(t.image); })
  (< TIME_END > t = < STRING > {r.setEndDate(t.image); })
  (< LINK >  t = < STRING >){r.setLink(t.image);}
  (< EVENT_LOCATION >  t = < STRING >){r.setEventLocation(t.image);}
  (< AREA>(< IDAREA > t = < STRING >){r.setArea(t.image);})
  (< LATITUDE >  t = < DOUBLE >){r.setLatitude(Double.parseDouble(t.image));}
  (< LONGITUDE >  t = < DOUBLE >){r.setLongitude(Double.parseDouble(t.image));}
  (< ORGANIZATION_NAME >t = < STRING >){r.setOrganizationName(t.image);}
  (< ACCESIBILITY >  t = < ACCESIBILITY_STRING >){r.setAccesibility(t.image);}
  
  {return r;}
}

